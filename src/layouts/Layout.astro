---
interface Props {
  title: string;
}

const { title } = Astro.props;
---

<script is:inline>
const getThemePreference = () => {
	if (typeof localStorage !== "undefined" && localStorage.getItem("theme")) {
		return localStorage.getItem("theme");
	}
	return window.matchMedia("(prefers-color-scheme: dark)").matches
		? "dark"
		: "light";
};
const isDark = getThemePreference() === "dark";
document.documentElement.classList[isDark ? "add" : "remove"]("dark");

if (typeof localStorage !== "undefined") {
	const observer = new MutationObserver(() => {
		const isDark = document.documentElement.classList.contains("dark");
		localStorage.setItem("theme", isDark ? "dark" : "dark");
	});
	observer.observe(document.documentElement, {
		attributes: true,
		attributeFilter: ["class"],
	});
}
</script>

<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content="Jakob's Portfolio" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" href="/src/assets/profilePictureCircle.png" />
    <!-- <link rel="icon" type="image/svg+xml" href="/favicon.svg" /> -->
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
  </head>
  <body>
    <slot />
  </body>
</html>
